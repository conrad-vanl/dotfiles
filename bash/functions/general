## -------------------------------------
##   Functions
## -------------------------------------

## ----- Homebrew Dependencies ----- ##
## Lists out all brew packages and associated dependencies
##
## Usage: `brew_deps`
##
function brew_deps() {
  brew list | while read cask; do echo -n $cask; brew deps $cask | awk '{ printf(" %s ", $0) }'; echo ""; done
}

## ----- Delete Files ----- ##
## Deletes files with a pattern
##
## $1 - the file(s)
##
## Usage: `delete_files .DS_Store`
##
function delete_files() {
  find . -name $1 -delete
}

## ----- Find Alias ----- ##
## Greps for a specific alias in aliases
##
## $1 - the alias
##
## Usage: `find_alias mv`
##
function find_alias() {
  grep $1 ~/.dotfiles/bash/aliases
}

## ----- Get Process ID ----- ##
## Returns a process id or set of ids for specified process
##
## $1 - the process id
##
## Usage: `get_process_id ruby`
##
function get_process_id() {
  ps aux | grep $1 | awk '{print $2}'
}

## ----- Git Delete Tag ----- ##
## Deletes a git tag on remote
##
## $1 - the tag name
##
## Usage: `git_delete_remote_tag v1.2.0`
##
function git_delete_remote_tag() {
  git push origin :refs/tags/$1
}

## ----- Git Remote Tracking Branch ----- ##
## Creates a new branch and pushes that branch to remote
##
## $1 - the branch name
##
## Usage: `git_remote_tracking_branch fix_sign_up_form_styles`
##
function git_remote_tracking_branch() {
  git checkout -b $1 && git push -u origin $1
}

## ----- Git Tag ----- ##
## Simpler method for setting a git tag (assumes prefixed 'v')
##
## $1 - 'major', 'minor', 'patch'
##
## Usage: `git_tag major`
##
function git_tag() {
  tag=$(git describe --abbrev=0 --tags)
  major=$(echo $tag | cut -d '.' -f1 | grep -o "[0-9]")
  major=$(echo $major | tr -d ' ')
  minor=$(echo $tag | cut -d '.' -f2)
  patch=$(echo $tag | cut -d '.' -f3)

  if [[ "$1" == 'major' ]]
  then
    nmajor=$(($major+1))
    version="$nmajor.0.0"
  fi

  if [[ "$1" == 'minor' ]]
  then
    nminor=$(($minor+1))
    version="$major.$nminor.0"
  fi

  if [[ "$1" == 'patch' ]]
  then
    npatch=$(($patch+1))
    version="$major.$minor.$npatch"
  fi

  git tag -a "v$version" -m "Version $version"
  echo "v$version created!"
}

## ----- Server ----- ##
## Simple HTTP server from a directory, optionally specifying a port
##
## $1 - the port (optional)
##
## Usage: `server`
##
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  python -m SimpleHTTPServer "$port"
}

## ----- Open ----- ##
## Alias for 'open' command
##
## $1 - 'l' (localhost) or 'm' (Middleman)
## $2 - the URL (without 'http://' prefix)
##
## Usage: `o google.com`, `o l 3000`, `o m`
##
function o() {
  if [ "$1" == 'l' ]
  then
    open http://localhost:$2/$3
  elif [ "$1" == 'm' ]
  then
    open http://localhost:4567/$2
  else
    open http://$1
  fi
}

## ----- Run Shell Script ----- ##
## Runs a shell script passed in via curl
##
## $1 - the shell script
##
## Usage: `run_sh http://www.example.com/install.sh`
##
function run_sh() {
  bash <(curl -s $1)
}

## ----- Symlinks ----- ##
## List symlink files in a specified directory
##
## $1 - the directory
##
## Usage: `symlinks ~`
##
function symlinks() {
  ls -al "$1" | grep .-\>
}

## ----- Todo----- ##
## Adds a text todo to a text file
##
## $1 - the todo
##
## Usage: `todo Do this thing!`
##
function todo() {
  echo "- $*" >> "$TODOLIST_PATH_RAW"
  echo "Added!"
}

## ----- Wallpaper ----- ##
## Uses the 'desktop' gem to set a wallpaper everywhere
##
## $1 - the category ('art', 'space', etc.)
## $2 - the wallpaper
##
## Usage: `wall space 01.jpg`
##
function wall() {
  category=$(echo $1 | tr 'A-Z' 'a-z')
  desktop "$WALLPAPER_PATH"/"$1"/wallpapers-"$category"-"$2"
}

