# ****************************************************
#
#   Functions - Git
#
# ****************************************************

# ----------------------------------------------------
#   Git Delete Branch For Real
#   -> Delete both local and remote copies of a branch
# ----------------------------------------------------
#
# $1 - the branch name
#
# Usage: `git_delete_branch_for_real fix_form_styles`
#

function git_delete_branch_for_real() {
  git branch -D $1 && git push origin :$1
}

# ----------------------------------------------------
#   Git Diff From Master
#   -> Show changes on specified branch that are
#      different than master
# ----------------------------------------------------
#
# $1 - 'files' show only files changed (optional)
# $2 - the name of the branch
#
# Usage: `git_diff_from_master my_feature_branch`
# Usage: `git_diff_from_master my_feature_branch path/to/directory`
# Usage: `git_diff_from_master files my_feature_branch`
# Usage: `git_diff_from_master files my_feature_branch | grep 'path/to/directory'`
#
function git_diff_from_master() {
  if [ "$1" == 'files' ]; then

    git diff --name-only master..$2

  else

    git diff master..$1 $*

  fi
}

# ----------------------------------------------------
#   Find Branch
#   -> Find a specific branch (local or remote)
# ----------------------------------------------------
#
# $1 - the name of the branch
#
# Usage: `git_find_branch update_`
#

function git_find_branch() {
  git branch -a | grep $1
}

# ----------------------------------------------------
#   Delete Remote Tag
#   -> Delete git tag on remote
# ----------------------------------------------------
#
# $1 - the tag name
#
# Usage: `git_delete_remote_tag v1.2.0`
#

function git_delete_remote_tag() {
  git push origin :refs/tags/$1
}

# ----------------------------------------------------
#   Interactive Rebase
#   -> Runs git interactive rebase
# ----------------------------------------------------
#
# $1 - the number of commits to rebase
#
# Usage: `git_interactive_rebase 4`
#

function git_interactive_rebase() {
  git rebase -i HEAD~$1
}

# ----------------------------------------------------
#   Remote Tracking Branch
#   -> Creates a new branch and pushes that branch to remote
# ----------------------------------------------------
#
# $1 - the branch name
#
# Usage: `git_remote_tracking_branch fix_sign_up_form_styles`
#

function git_remote_tracking_branch() {
  git checkout -b $1 && git push -u origin $1
}

# ----------------------------------------------------
#   Search Commits
#   -> Runs a search on all commit messages
# ----------------------------------------------------
#
# $1 - the search string
#
# Usage: `git_search_commits 'my search string'`
#

function git_search_commits() {
  git log --all --oneline --grep="$1"
}

# ----------------------------------------------------
#   Tag
#   -> Automatically set a git tag based on Semantic Versioning keyword
# ----------------------------------------------------
#
# $1 - 'major', 'minor', 'patch'
#
# Usage: `git_tag major`
#

function git_tag() {
  local tag=$(git describe --abbrev=0 --tags 2>/dev/null)
  local prefix=$(echo $tag | grep -o --color=never "[A-z]\+")
  local major=$(echo $tag | cut -d '.' -f1 | grep -o --color=never "[0-9]")
  local minor=$(echo $tag | cut -d '.' -f2)
  local patch=$(echo $tag | cut -d '.' -f3)

  case "$1" in

    'major')
      local nmajor=$(($major+1))
      local version="$nmajor.0.0"
      ;;

    'minor')
      local nminor=$(($minor+1))
      local version="$major.$nminor.0"
      ;;

    'patch')
      local npatch=$(($patch+1))
      local version="$major.$minor.$npatch"
      ;;

    *)
      echo "Automatically set a git tag based on Semantic Versioning keyword"
      echo
      echo "Usage: git_tag <major|minor|patch>"
      echo
      echo "Example:"
      echo "  git_tag major"
      echo
      echo "If this is your first tag, use 'git tag' to set up your first one."

  esac

  if [[ "$version" ]]; then

    git tag -a "$prefix$version" -m "Version $version"
    echo "$prefix$version created!"

  fi
}
